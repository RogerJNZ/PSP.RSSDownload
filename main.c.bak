#include <pspkernel.h>
#include <pspsdk.h>
#include <time.h>
#include <oslib/oslib.h>


#include <sys/select.h>
#include <curl/curl.h>
#include "fileOperation.h"
#include "network.h"
#include "media.h"

PSP_MODULE_INFO("Download", 0, 1, 0);
PSP_MAIN_THREAD_ATTR(THREAD_ATTR_USER | THREAD_ATTR_VFPU);
PSP_HEAP_SIZE_KB(12*1024);

#define ANALOG_SENS 80
#define VERSION "4.1.2"


/* Globals: */
int runningFlag = 1;
struct homebrew HBlist[MAX_HB];
OSL_IMAGE *bkg,*startb, *selectb, *cross,*circle, *R, *L, *imgRSS, *imgHTML, *imgUnselect, *imgSquare, *imgSelect;
OSL_FONT *pgfFont;
//char ERRORDESC[50] = "";


/* Draw toolbars: */
//char t[100];
//char hbfound[100];



/*  Main menu: */
int mainMenu(){
	CURL *curl;
	int skip = 0;
    int start = 26;
    int first = 0;
    int total = 0;
	int curlStatus = 0;
	char hbfound[20];
    int visible = 13;
    int selected = -1;
    int i = 0;
    int SelectReleaseFlag = 0;
	int HBDownloading = 0;  // 1 if currently download 0 otherwise
	int HBDownloadingWait = 0; // Add pause after displaying Network dialog
	int HBListChanged = 0; // Don't save list of links if the use didn't make any changes
	int HBSelectAll = 1; // flag if currently selecting to download all
	int imgHeight = 0,
		imgWidth = 0;

	total = getHBlist(HBlist);
	if (total <	1) strcpy(ERRORDESC, "E001 No links found in feeds.txt");
	
    while (!osl_quit){
        if(!skip){
            oslStartDrawing();
            oslDrawImageXY(bkg, 0, 0);
			// Top Toolbar
		    oslDrawFillRect(0,0,480,15,RGBA(0,0,0,170)); // Top Bar
		    oslDrawString(5,0,"DownloadLinks by RogerJ");
			oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,255), RGBA(0,0,0,0), INTRAFONT_ALIGN_RIGHT);
			sprintf(hbfound,"Links found: %i", total);
			oslDrawString(470,0, hbfound);
//			oslDrawString(390,0,HBlist[i].speed);
			
			
			// Key Help
            oslDrawFillRect(290,22,475,113,RGBA(0,0,0,170)); 
			oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,255), RGBA(0,0,0,0), INTRAFONT_ALIGN_LEFT);
			oslDrawString(350,22,"Modify List");
			oslDrawString(350,183,"Download Files");
			if (HBDownloading) 
				oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,100), RGBA(0,0,0,0), INTRAFONT_ALIGN_LEFT);
			oslDrawImageXY(cross,360,41);
			oslDrawString(390,42,"Select/Release");
			oslDrawImageXY(L,359,62);
			oslDrawString(390,62,"Page Up");
			oslDrawImageXY(R,359,82);
			oslDrawString(390,82,"Page Down");
			
			oslDrawImageXY(imgSquare,360,102);
			if (HBlist[selected].download) {
				oslDrawString(390,102,"Skip Link");
			} else {
				oslDrawString(390,102,"Download Link");
			}
			oslDrawImageXY(imgSelect,350,121);
			if (HBSelectAll) {
				oslDrawString(390,122,"Skip All Links");
			} else {
				oslDrawString(390,122,"Download All");
			}
			
			oslDrawImageXY(startb,350,202);
			oslDrawString(390,203,"Start Download");
			oslDrawImageXY(circle,360,223);
			if (!HBDownloading) 
				oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,100), RGBA(0,0,0,0), INTRAFONT_ALIGN_LEFT);
			else
				oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,255), RGBA(0,0,0,0), INTRAFONT_ALIGN_LEFT);
			oslDrawString(390,223,"Cancel Download");
		
            oslDrawFillRect(5,22,340,238,RGBA(0,0,0,170)); // File List Background
			oslDrawFillRect(0,254,480,272,RGBA(0,0,0,170)); // Bottom Bar

            //Draw menu:
            for (i=first; i<=first+visible; i++){
                if(i<total){
					if (!HBlist[i].download) {
						imgHeight = oslGetImageHeight(imgUnselect) + 1;
						imgWidth = oslGetImageWidth(imgUnselect);
						oslDrawImageXY(imgHTML, 12, start + (i - first)*imgHeight); // Workaround for bug in osLIB which results in an image being displayed only if it is different from the previous image...
						oslDrawImageXY(imgUnselect, 12, start + (i - first)*imgHeight);
					} else if (HBlist[i].type == TYPE_RSS) {
						imgHeight = oslGetImageHeight(imgRSS) + 2;
						imgWidth = oslGetImageWidth(imgRSS);
						oslDrawImageXY(imgHTML, 12, start + (i - first)*imgHeight); // Workaround for bug in osLIB which results in an image being displayed only if it is different from the previous image...
						oslDrawImageXY(imgRSS, 12, start + (i - first)*imgHeight);
					} else {
						imgHeight = oslGetImageHeight(imgHTML) + 2;
						imgWidth = oslGetImageWidth(imgHTML);
						oslDrawImageXY(imgRSS, 12, start + (i - first)*imgHeight); // Workaround for bug in osLIB which results in an image being displayed only if it is different from the previous image...
						oslDrawImageXY(imgHTML, 12, start + (i - first)*imgHeight);
					}
	                if (i == selected){
	                    oslIntraFontSetStyle(pgfFont, 0.5, RGBA(20,20,20,255), RGBA(255,255,255,200), INTRAFONT_ALIGN_LEFT);
	                    oslSetFont(pgfFont);
	                }else{
	                    oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,255), RGBA(0,0,0,0), INTRAFONT_ALIGN_LEFT);
	                    oslSetFont(pgfFont);
	                }
					oslDrawString(15 + imgWidth,start +(i - first)*imgHeight, HBlist[i].name);
					oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,255), RGBA(0,0,0,0), INTRAFONT_ALIGN_RIGHT);
					oslDrawString(280, start + (i - first)*imgHeight, HBlist[i].size);
					oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,100), RGBA(0,0,0,0), INTRAFONT_ALIGN_RIGHT);
					oslDrawString(335, start + (i - first)*imgHeight, HBlist[i].speed);
                }
            }

			oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,255), RGBA(0,0,0,0), INTRAFONT_ALIGN_LEFT);
			if (HBDownloading == 1) 
				oslDrawString(5,240, ERRORDESC);
			else
				oslDrawString(5,240, HBlist[selected].error);
	
			if (selected < 0) {
				oslDrawString(5,256, "GUI 'borrowed' from Sakya's Homebrew Sorter. Thanks Sakya!");
			} else {
				oslDrawString(5,256, HBlist[selected].path);
			}

            oslEndDrawing();
        }
        oslEndFrame();
        skip = oslSyncFrame();


	
        oslReadKeys();
		if (!HBDownloading) {
	        if (osl_keys->pressed.down) {
				if(SelectReleaseFlag==0){
						if (selected < total - 1){
							if (++selected > first + visible)
								first++;
						}
				} else {
					if (selected < total - 1){
						HBListChanged = 1;
						moveHBdown(selected, HBlist);
						if (++selected > first + visible)
							first++;
					}
				}
	        } else if (osl_keys->pressed.up){
				if(SelectReleaseFlag==0){
					if (selected > 0){
						if (--selected < first)
							first--;
					}
				} else {
					if (selected > 0){
						HBListChanged = 1;
						moveHBup(selected, HBlist);
						if (--selected < first)
							first--;
					}
				}
	        } else if (osl_keys->released.cross){
				SelectReleaseFlag ^= 1;
	        } else if (osl_keys->released.square){
				HBlist[selected].download ^= 1;
	        } else if (osl_keys->released.L){
				if ((first - visible) > 0) {
					first = first - visible;
					selected = selected - visible;
				} else {
					first = 0;
					if ((selected - visible) > 0) {
						selected = selected - visible;
					} else {
						selected = 0;
					}
				}
	        } else if (osl_keys->released.R){
				if ((first + visible) < total) {
					first = first + visible;
					if ((selected + visible) < total) {
						selected = selected + visible;
					} else {
						selected = total - 1;
					}
				}
	        } else if (osl_keys->released.select){
				HBSelectAll ^= 1;
				for (i = 0; i < total; i++){
					HBlist[i].download = HBSelectAll;
				}			
			} else if (osl_keys->released.start){
				if (!HBDownloading) {
					if (HBListChanged) {
						saveHBlist(HBlist, total);
					}

					// Refresh Download Stats
					for (i = 0; i < total ; i++) {
					//	strcpy(HBlist[i].progress, "");
						strcpy(HBlist[i].size, "");
						strcpy(HBlist[i].speed, "");
						strcpy(HBlist[i].error, "");
					}
					if (initNetwork() == 0) { //return data.base.result; // 0 for successfully connected, 1 if user cancelled and an error code if there was some error.
						HBDownloading = 1;
						HBDownloadingWait = 0;
						selected = -1;
						first = 0;
						HBListChanged = 0;
						curl = curl_easy_init();
						configCurl(curl);
					}
				}
	        } 
		// If downloading then check for cancel or process next link
        } else {
			if (osl_keys->held.circle){
				if (HBDownloading) {
					HBDownloading = 0;
					strcpy(HBlist[selected].speed, "CANCELLED");
					curl_easy_cleanup(curl);
					netTerm();
					UnloadModules();							
				}
			}
			
			// Download files
			if (HBDownloading && HBDownloadingWait++ > 5) { // Wait a few interations to allow time to be redrawn after network options displayed
				if (selected < total) {
					if (HBlist[selected].download) {
						if (get_link(curl, HBlist, selected, total - 1) != 1) {
							strcpy(HBlist[selected].error, ERRORDESC);
						} else if (write_html(HBlist, selected, total - 1) != 1) {
							strcpy(HBlist[selected].error, ERRORDESC);
						}
					} else {
						strcpy(HBlist[selected].speed, "SKIPPED");
					}
					// Add the file to the index even if it is not updated this session
					if (update_index(HBlist, selected) != 1) {
						strcpy(HBlist[selected].error, ERRORDESC);
					}
					if (strcmp(HBlist[selected].error, "") != 0) {
						strcpy(HBlist[selected].speed, "FAILED");
					}
					if (++selected > first + visible) {
						first++;
					}
					//HBDownloadingWait = 0;
				} else {
					HBDownloading = 0;
					curl_easy_cleanup(curl);
					netTerm();
					UnloadModules();	
				}
			}
		}
    }
    return 0;
}


const OSL_VIRTUALFILENAME __image_ram_files[] = {
	{"ram:/Media/bkg.png", (void*)bkg_png, sizeof(bkg_png), &VF_MEMORY},
	{"ram:/Media/start.png", (void*)start_png, sizeof(start_png), &VF_MEMORY},
	{"ram:/Media/cross.png", (void*)cross_png, sizeof(cross_png), &VF_MEMORY},
	{"ram:/Media/circle.png", (void*)circle_png, sizeof(circle_png), &VF_MEMORY},
	{"ram:/Media/square.png", (void*)square_png, sizeof(square_png), &VF_MEMORY},
	{"ram:/Media/rss.png", (void*)rss_png, sizeof(rss_png), &VF_MEMORY},
	{"ram:/Media/html.png", (void*)html_png, sizeof(html_png), &VF_MEMORY},
	{"ram:/Media/select.png", (void*)select_png, sizeof(select_png), &VF_MEMORY},
	{"ram:/Media/unselect.png", (void*)unselect_png, sizeof(unselect_png), &VF_MEMORY},
	{"ram:/Media/R.png", (void*)R_png, sizeof(R_png), &VF_MEMORY},
	{"ram:/Media/L.png", (void*)L_png, sizeof(L_png), &VF_MEMORY}
};

int initOSLib(){
    oslInit(0);
    oslInitGfx(OSL_PF_8888, 1);
   // oslInitAudio();
    oslSetQuitOnLoadFailure(1);
	oslAddVirtualFileList((OSL_VIRTUALFILENAME*)__image_ram_files, oslNumberof(__image_ram_files));
	bkg = oslLoadImageFilePNG("ram:/Media/bkg.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	imgRSS = oslLoadImageFilePNG("ram:/Media/rss.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	imgHTML = oslLoadImageFilePNG("ram:/Media/html.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	imgUnselect = oslLoadImageFilePNG("ram:/Media/unselect.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	startb = oslLoadImageFilePNG("ram:/Media/start.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	imgSelect = oslLoadImageFilePNG("ram:/Media/select.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	cross = oslLoadImageFilePNG("ram:/Media/cross.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	circle = oslLoadImageFilePNG("ram:/Media/circle.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	imgSquare = oslLoadImageFilePNG("ram:/Media/square.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	R = oslLoadImageFilePNG("ram:/Media/R.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
	L = oslLoadImageFilePNG("ram:/Media/L.png", OSL_IN_RAM | OSL_SWIZZLED, OSL_PF_8888);
    oslSetKeyAutorepeatInit(40);
    oslSetKeyAutorepeatInterval(10);
    oslIntraFontInit(INTRAFONT_CACHE_MED);
	pgfFont = oslLoadFontFile("flash0:/font/ltn0.pgf");
    oslIntraFontSetStyle(pgfFont, 0.5, RGBA(255,255,255,255), RGBA(0,0,0,0), INTRAFONT_ALIGN_LEFT);
    oslSetFont(pgfFont);
	oslSetKeyAnalogToDPad(ANALOG_SENS);
    return 0;
}





/* Main: */
int main(){
    initOSLib();
    tzset();
	mainMenu();
    oslEndGfx();
	oslQuit();
    return 0;

}


